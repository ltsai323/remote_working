oDIR ?= output
iYAML ?= test.psuedofit.yaml


timeSTAMP := $$(date "+%Y%m%d_%H%M")

check_defined = \
    $(strip $(foreach 1,$1, \
    $(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
    $(if $(value $1),, \
    $(error Undefined $1$(if $2, ($2))))

check_shell_var_defined = \
  	$(if $(shell [ -z "$${$1}" ] && echo undefined), \
	$(error Shell variable $1 is undefined), \
	$(info Shell variable $1 is set))
# Check if directory exists and print info or abort
define check_dir_existed
	@if [ ! -d "$(1)" ]; then \
		echo "[ERROR] Directory '$(1)' does not exist. Please execute step1 again. Aborting..."; \
		exit 1; \
	else \
		echo "[INFO] Shell program running in folder: $(1)"; \
	fi
endef
# Check if directory exists and print info or abort
define check_file_existed
	@if [ ! -f "$(1)" ]; then \
		echo "[ERROR] File '$(1)' does not exist. Please confirm this file exist. Aborting..."; \
		exit 1; \
	else \
		echo "[INFO] Shell program running in folder: $(1)"; \
	fi
endef


step10_prepare_histograms:  clean-odir $(oDIR) ## Create histograms for 
	cd $(oDIR) && python3 ../make_hist_source_and_datacard.py ../$(iYAML)

check1_makehisto_content: ## Create secondary rootfile for checking makehisto.root is correct or not
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && python3 ../secondary_plot_creation.py ../$(iYAML)
	cd $(oDIR) && DrawRatioPlotablesWithCMSFormat.py ../input.check.yaml


_TMP_DATACARD        := psuedofit_datacard.txt
_TMP_INPUT_WORKSPACE := psuedofit_ws.root

step2_text2workspace: ## create workspace for combine
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && text2workspace.py $(_TMP_DATACARD) -o $(_TMP_INPUT_WORKSPACE) \
    	-P HiggsAnalysis.CombinedLimit.PhysicsModel:multiSignalModel \
    	--PO "map=.*/Ljet:rL[1.0,0.,2.0]" \
    	--PO "map=.*/Cjet:rC[1.0,0.,2.0]" \
    	--PO "map=.*/Bjet:rB[1.0,0.,2.0]" \
    	--PO verbose || (echo "failed to create workspace from datacard"; exit 1)

step3_combine: ## combine fitting result
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && combine --saveWorkspace -M MultiDimFit -d $(_TMP_INPUT_WORKSPACE) --saveFitResult --saveNLL --robustFit on || the_exit "failed to run combine @ data sideband"
	cd $(oDIR) && mv multidimfitTest.root $(_TMP_MULTIDIMFITTEST) ; mv higgsCombineTest.MultiDimFit.mH120.root $(_TMP_HIGGSCOMBINETEST)

_TMP_MULTIDIMFITTEST  := psuedofit_multidimfitTest.root
_TMP_HIGGSCOMBINETEST := psuedofit_higgsCombineTest.MultiDimFit.mH120.root
OUT_FITINFO           := psuedofit_fitinfo.yaml
POSTFIT_ROOT          := psuedofit_postfit.root
step4_postfit: ## postfit for visualization
	$(call check_dir_existed,$(oDIR))
### [post process] collect result to yaml file
	cd $(oDIR) && python3 ../extract_fit_value.py \
	   $(_TMP_HIGGSCOMBINETEST) \
	   $(OUT_FITINFO) \
	   rL rC rB  # variables from fit
### Use sideband fit to extract the initial value of the C/B/L fractions ended
	cd $(oDIR) && PostFitShapesFromWorkspace -d $(_TMP_DATACARD) \
		-w $(_TMP_HIGGSCOMBINETEST) \
		-m 120 -f $(_TMP_MULTIDIMFITTEST):fit_mdf \
		--postfit --print --output $(POSTFIT_ROOT)

POSTFIT_ROOT_CHANNEL := postfit.gjet_psuedofit_postfit.root # POSTFIT_ROOT + _ + CHANNEL  + .root   This file is generated by secondary_plot_creation_postfit.py
check4_postfit: ## check plot on postfit
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && python3 ../secondary_plot_creation_postfit.py  $(POSTFIT_ROOT)
	cd $(oDIR) && DrawRatioPlotablesWithCMSFormat.py ../input.check.postfit.psuedodata.yaml $(POSTFIT_ROOT_CHANNEL)
	

check5_checktruth: ## check truth value
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && python3 ../compare_truth_and_fit_value.py ../$(iYAML)


collect_psuedofit_result: ## collect all psuedofit result. Please put illustrations into note.md [outputFOLDER=output_hiii]
	$(call check_defined,outputFOLDER)
	$(call check_file_existed,note.md)
	touch $(outputFOLDER); /bin/rm -rf $(outputFOLDER); mkdir $(outputFOLDER); mv psuedodata_* $(outputFOLDER); mv note.md $(outputFOLDER); mv log_* $(outputFOLDER)
collect_psuedofit_result_nonote: ## collect all psuedofit result. Please put illustrations into note.md [outputFOLDER=output_hiii]
	$(call check_defined,outputFOLDER)
	touch $(outputFOLDER); /bin/rm -rf $(outputFOLDER); mkdir $(outputFOLDER); mv psuedodata_* $(outputFOLDER); mv log_* $(outputFOLDER)


# Create output directory
$(oDIR):
	@echo "[INFO] Creating directory: $(oDIR)"
	mkdir $@


# Clean the output directory before running
clean-odir:
	@if [ -d "$(oDIR)" ]; then \
		echo "[INFO] Cleaning directory: $(oDIR)"; \
		rm -rf "$(oDIR)"; \
	fi

# Optional target: Manual cleanup
clean:
	@echo "[INFO] Removing directory: $(oDIR)"
	@rm -rf "$(oDIR)"

test: $(oDIR)
	echo goto new dir
	cd $(oDIR)
	pwd


all: \
	step10_prepare_histograms \
	check1_makehisto_content \
	step2_text2workspace \
	step3_combine \
	step4_postfit \
	check4_postfit \
	check5_checktruth


IN_ARGS = [opts]

help:  ## Display this help
	@awk 'BEGIN {FS = ":.*##"; printf "Usage: make \033[32m<command>\033[0m $(IN_ARGS)\n\nCommands:\n\033[36m\033[0m\n"} /^[0-9a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

.DEFAULT_GOAL := help

