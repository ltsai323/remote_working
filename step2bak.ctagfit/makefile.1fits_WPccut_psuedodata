oDIR ?= output
iYAMLbtag ?= source.1fit_psuedofit_btag.yaml
#iYAMLBDT  ?= test.btag_psuedofit_BDTAll.yaml
self=makefile.3fits_btagcut_psuedodata


timeSTAMP := $$(date "+%Y%m%d_%H%M")

check_defined = \
    $(strip $(foreach 1,$1, \
    $(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
    $(if $(value $1),, \
    $(error Undefined $1$(if $2, ($2))))

check_shell_var_defined = \
  	$(if $(shell [ -z "$${$1}" ] && echo undefined), \
	$(error Shell variable $1 is undefined), \
	$(info Shell variable $1 is set))
# Check if directory exists and print info or abort
define check_dir_existed
	@if [ ! -d "$(1)" ]; then \
		echo "[ERROR] Directory '$(1)' does not exist. Please execute step1 again. Aborting..."; \
		exit 1; \
	else \
		echo "[INFO] Shell program running in folder: $(1)"; \
	fi
endef
# Check if directory exists and print info or abort
define check_file_existed
	@if [ ! -f "$(1)" ]; then \
		echo "[ERROR] File '$(1)' does not exist. Please confirm this file exist. Aborting..."; \
		exit 1; \
	else \
		echo "[INFO] Shell program running in folder: $(1)"; \
	fi
endef

put_yamlfile: $(oDIR)
	@echo copy yamlfile to dir
	cp $(yaml) $(oDIR)

step10_prepare_histograms:  clean-odir $(oDIR) ## Create histograms for [oDIR=output_dir_name][rootMAKEHISTO=makehisto_used_file.root][iYAML=test.btag_psuedofit.yaml]
	$(call check_defined,rootMAKEHISTO)
	make -f $(self) put_yamlfile yaml=$(iYAMLbtag) oDIR=$(oDIR)
	#make put_yamlfile yaml=$(iYAMLBDT)  oDIR=$(oDIR)
	cd $(oDIR) && \
		python3 ../make_hist_source_and_datacard.py $(iYAMLbtag) && \
		combineCards.py  btag=psuedofit_datacard_btag.txt > $(_TMP_DATACARD)




_TMP_DATACARD        := psuedofit_datacard.txt
_TMP_INPUT_WORKSPACE := psuedofit_ws.root
_TMP_INIT_BASH			 := psuedofit_datacard.defaultValue.sh

step2_text2workspace: ## create workspace for combine
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && source ./$(_TMP_INIT_BASH) && \
		text2workspace.py $(_TMP_DATACARD) -o $(_TMP_INPUT_WORKSPACE) \
    	-P HiggsAnalysis.CombinedLimit.PhysicsModel:multiSignalModel \
    	--PO "map=.*/Ljet:numL[$${nL},0.,$${nDATA}]" \
    	--PO "map=.*/Cjet:numC[$${nC},0.,$${nDATA}]" \
    	--PO verbose || (echo "failed to create workspace from datacard"; exit 1)

step3_combine: ## combine fitting result
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && combine --saveWorkspace -M MultiDimFit -d $(_TMP_INPUT_WORKSPACE) --saveFitResult --saveNLL --robustFit on -n SimulFit || the_exit "failed to run combine @ data sideband"

_TMP_MULTIDIMFITTEST  := multidimfitSimulFit.root
_TMP_HIGGSCOMBINETEST := higgsCombineSimulFit.MultiDimFit.mH120.root
OUT_FITINFO           := psuedofit_fitinfo.yaml
POSTFIT_ROOT          := psuedofit_postfit.root
step4_postfit: ## postfit for visualization
	$(call check_dir_existed,$(oDIR))
### [post process] collect result to yaml file
	cd $(oDIR) && python3 ../extract_fit_value.py \
	   $(_TMP_HIGGSCOMBINETEST) \
	   $(OUT_FITINFO) \
	   numL numC  # variables from fit
### Use sideband fit to extract the initial value of the C/B/L fractions ended
	cd $(oDIR) && PostFitShapesFromWorkspace -d $(_TMP_DATACARD) \
		-w $(_TMP_HIGGSCOMBINETEST) \
		-m 120 -f $(_TMP_MULTIDIMFITTEST):fit_mdf \
		--postfit --print --output $(POSTFIT_ROOT)

check4_postfit: ## check plot on postfit
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && python3 ../secondary_plot_creation_postfit.py  $(POSTFIT_ROOT)
	cd $(oDIR) && \
		DrawRatioPlotablesWithCMSFormat.py ../input.check.postfit.psuedodata.1fit_btag.yaml


OUT_FITINFO_BASHVAR := psuedofit_fitinfo_bashvar.sh
step5_profiledLL:
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && python3 ../convert_yamlvar_to_bashval.py $(OUT_FITINFO) $(OUT_FITINFO_BASHVAR)
	cd $(oDIR) && source ./$(OUT_FITINFO_BASHVAR) && \
		 combine -M MultiDimFit $(_TMP_HIGGSCOMBINETEST) --robustFit 1 --algo grid --points 300 --setParameterRanges numC=$${numC_rangeL},$${numC_rangeR} -P numC -n _scan_numC && \
		 ../plot1DScan.py --POI numC higgsCombine_scan_numC.MultiDimFit.mH120.root -o scan.numC

OUT_FITINFO_BASHVAR_2nd := psuedofit_fitinfo_2ndSimulFit_bashvar.sh
_TMP_INPUT_WORKSPACE_2nd := psuedofit_ws_2ndSimulFit.root
_TMP_MULTIDIMFITTEST_2nd  := multidimfit2ndSimulFit.root
_TMP_HIGGSCOMBINETEST_2nd := higgsCombine2ndSimulFit.MultiDimFit.mH120.root


step6_combinetwice:
	cd $(oDIR) && python3 ../convert_yamlvar_to_bashval.py scan.numC.yaml scan.numC.fitval.sh
	cd $(oDIR) && source ./$(OUT_FITINFO_BASHVAR) && \
	    source ./scan.numC.fitval.sh && \
		echo "numL: $${numL_central},$${numL_rangeL},$${numL_rangeR}" && \
		echo "numC: $${numC_central},$${numC_rangeL},$${numC_rangeR}" && \
		text2workspace.py $(_TMP_DATACARD) -o $(_TMP_INPUT_WORKSPACE_2nd) \
    	-P HiggsAnalysis.CombinedLimit.PhysicsModel:multiSignalModel \
    	--PO "map=.*/Ljet:numL[$${numL_central},$${numL_rangeL},$${numL_rangeR}]" \
    	--PO "map=.*/Cjet:numC[$${numC_central},$${numC_rangeL},$${numC_rangeR}]" \
    	--PO verbose || (echo "failed to create workspace from datacard"; exit 1)
	cd $(oDIR) && combine --saveWorkspace -M MultiDimFit -d $(_TMP_INPUT_WORKSPACE_2nd) --saveFitResult --saveNLL --robustFit on -n 2ndSimulFit || the_exit "failed to run combine @ data sideband"
	cd $(oDIR) && source ./scan.numC.fitval.sh && \
		 combine -M MultiDimFit $(_TMP_HIGGSCOMBINETEST_2nd) --robustFit 1 --algo grid --points 1000 --setParameterRanges numC=$${numC_rangeL},$${numC_rangeR} -P numC -n _scan_numC && \
		 ../plot1DScan.py --POI numC higgsCombine_scan_numC.MultiDimFit.mH120.root -o scan.numC2nd
	cd $(oDIR) && source ./$(OUT_FITINFO_BASHVAR) && \
		 combine -M MultiDimFit $(_TMP_HIGGSCOMBINETEST_2nd) --robustFit 1 --algo grid --points 1000 --setParameterRanges numL=$${numL_rangeL},$${numL_rangeR} -P numL -n _scan_numL && \
		 ../plot1DScan.py --POI numL higgsCombine_scan_numL.MultiDimFit.mH120.root -o scan.numL2nd
check9_checktruth: ## check truth value
	$(call check_dir_existed,$(oDIR))
	cd $(oDIR) && python3 ../_compare_truth_and_fit_value.py $(iYAMLbtag) scan.numL2nd.yaml scan.numC2nd.yaml # The result for iYAMLbtag / iYAMLcvsb / iYAMLcvsl are the same
	cd $(oDIR) && DrawRatioPlotablesWithCMSFormat.py ../input.check.psuedofit_truth.yaml




# Create output directory
$(oDIR):
	$(call check_defined,rootMAKEHISTO)
	@echo "[INFO] Creating directory: $(oDIR)"
	mkdir $@
	cp $(rootMAKEHISTO) $@/makehisto.root ## copy makehisto.root into working directory


# Clean the output directory before running
clean-odir:
	@if [ -d "$(oDIR)" ]; then \
		echo "[INFO] Cleaning directory: $(oDIR)"; \
		rm -rf "$(oDIR)"; \
	fi

# Optional target: Manual cleanup
clean:
	@echo "[INFO] Removing directory: $(oDIR)"
	@rm -rf "$(oDIR)"

test: $(oDIR)
	echo goto new dir
	cd $(oDIR)
	pwd


all: \
	step10_prepare_histograms \
	step2_text2workspace \
	step3_combine \
	step4_postfit \
	check4_postfit \
	step5_profiledLL \
	step6_combinetwice \
	check9_checktruth

_runagain_: step6_combinetwice check9_checktruth

runagain:  ## run combine twice again, please modify content of scan.numB.yaml and scan.numC.yaml [targetDIR=myprocess/binning_0_0_210_230/]
	$(call check_defined,targetDIR)
	oDIR=`basename $(targetDIR)`; \
		 /bin/rm -rf $$oDIR; cp -r $(targetDIR)  $$oDIR; \
		 make -f $(self) _runagain_ oDIR=$$oDIR iYAMLcvsb=source.btag_psuedofit_cvsb.yaml 2>&1 > log_$$oDIR  ; \
		 grep valid_lo log_$$oDIR; mv log_$$oDIR $$oDIR/

	#oDIR=`basename $(targetDIR)`; /bin/rm -rf $(targetDIR); mv  $$oDIR $(targetDIR)

put_runagain_res: # put rerun results to output folder [sourceDIR=hiii/]
	$(call check_defined,sourceDIR)
	for a in binned*; do /bin/rm -rf $(sourceDIR)/$$a ; mv $$a $(sourceDIR)/; done


IN_ARGS = [opts]

help:  ## Display this help
	@awk 'BEGIN {FS = ":.*##"; printf "Usage: make \033[32m<command>\033[0m $(IN_ARGS)\n\nCommands:\n\033[36m\033[0m\n"} /^[0-9a-zA-Z_-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

.DEFAULT_GOAL := help


desc1_runall: ## run all
	@echo "run command by command 'make -f $(self) all  oDIR=some_dir rootMAKEHISTO=path/to/root'"
desc2_adjust_fitrange_and_rerun: ## note for manual rerun
	@echo "check fit result at folder 'my_all_process' by command 'grep valid_lo binned_*/log* | grep False'"
	@echo "check fit plot by command ' icat bin*/scan.numC2nd.pdf' 'icat bin*/scan.numL2nd.pdf' "
	@echo "modify values in yaml file by  command  'vi bin_some/scan.numC.yaml' 'vi bin_some/psuedofit_fitinfo_bashvar.sh' "
	@echo "go to root dir and run command 'make -f $(self) runagain targetDIR=my_all_process/binning_0_0_210_230'"
	@echo "after every fit finished and good. put everything back using 'make -f $(self) put_runagain_res sourceDIR=my_all_process'"
	@echo "and update merging*.pdf by command 'make -f makefile.runbinned merge_binning_comparetruth_LCB binningDIR=my_all_process/'"

